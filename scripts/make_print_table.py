#!/usr/bin/env python3
"""
Generate / refresh the ISS-Mimic 3-D-print checklist (wiki).

✓ Lists every *.stl / *.3mf under  3D_Printing/
  – skips archive_lofi/  and  the separate 3D_Printing_SLA/ folder
✓ Pulls Qty / Material from <part>.meta.yml
✓ Produces a GitHub-flavoured Markdown table with clickable links
"""

import argparse, os, pathlib, re, textwrap, yaml
from github import Github
from tabulate import tabulate

from markdown_it import MarkdownIt   # only needed to preserve Qty/Mat edits,
                                      # but harmless if unused

# ── repo paths & constants ──────────────────────────────────────────
REPO       = "ISS-Mimic/Mimic"
PART_ROOT  = "3D_Printing"                  # main printable directory
EXCLUDE    = {"archive_lofi"}               # sub-folders under PART_ROOT
RAW_URL    = f"https://github.com/{REPO}/blob/main/"

FRONT = textwrap.dedent("""\
    <!--
    Auto-generated by make_print_table.py
    Qty & Material are read from .meta.yml files.
    -->
    # ISS Mimic – 3-D Printing Checklist
    """).rstrip()

# ── CLI ----------------------------------------------------------------
ap = argparse.ArgumentParser()
ap.add_argument("--wiki-path", default="wiki")
ap.add_argument("--page", default="Build-Instruction:-3D-Printed-Parts.md")
args = ap.parse_args()
WIKI_MD = os.path.join(args.wiki_path, args.page)

# ── authentication -----------------------------------------------------
TOKEN = os.getenv("GH_PAT") or os.getenv("GITHUB_TOKEN")
gh    = Github(TOKEN) if TOKEN else Github()

# ── helpers ------------------------------------------------------------
def under_part_root(path: str) -> bool:
    """True only for files *inside* 3D_Printing/ (not 3D_Printing_SLA/)."""
    return path.startswith(f"{PART_ROOT}/")

def is_excluded(path: str) -> bool:
    """Filter out archive sub-folders (first segment after PART_ROOT)."""
    rel = path[len(PART_ROOT):].lstrip("/")          # e.g. "archive_lofi/foo.stl"
    return rel.split("/", 1)[0].lower() in EXCLUDE

def load_meta(repo_path: str) -> dict:
    """Return dict from <file>.meta.yml / .yaml (or {})."""
    p = pathlib.PurePosixPath(repo_path)
    for ext in (".meta.yml", ".meta.yaml"):
        try:
            blob = gh.get_repo(REPO).get_contents(str(p.with_suffix(ext)), ref="main")
            return yaml.safe_load(blob.decoded_content) or {}
        except Exception:
            pass
    return {}

# ── gather part list ---------------------------------------------------
tree = gh.get_repo(REPO).get_git_tree("main", recursive=True).tree
parts = [n.path for n in tree
         if n.type == "blob"
            and under_part_root(n.path)
            and not is_excluded(n.path)
            and n.path.lower().endswith((".stl", ".3mf"))]

# ── build table rows ---------------------------------------------------
rows = []
for repo_path in sorted(parts, key=str.lower):
    fname = repo_path.split("/")[-1]
    meta  = load_meta(repo_path)

    qty = str(meta.get("qty", ""))
    mat = meta.get("material", "")

    link = f"[{repo_path[len(PART_ROOT)+1:]}]({RAW_URL}{repo_path})"
    rows.append([f"`{fname}`", qty, mat, link])

md_table = tabulate(rows,
                    headers=["File", "Qty", "Material", "Path in repo"],
                    tablefmt="github")

# ── write / overwrite wiki page ---------------------------------------
os.makedirs(os.path.dirname(WIKI_MD), exist_ok=True)
with open(WIKI_MD, "w", encoding="utf-8") as fh:
    fh.write(FRONT + "\n\n" + md_table + "\n")
