#!/usr/bin/env python3
"""
Generate or update the ISS-Mimic 3-D print checklist in the wiki
with clickable file links and real check-boxes.
"""

import argparse, os, pathlib, re, textwrap, yaml
from github import Github
from tabulate import tabulate
from markdown_it import MarkdownIt

# ── config ────────────────────────────────────────────────
REPO      = "ISS-Mimic/Mimic"
PART_ROOT = "3D_Printing"
EXCLUDE   = {"archive_lofi","3D_Printing_SLA"}
RAW_URL   = f"https://github.com/{REPO}/blob/main/"

FRONT_MATTER = textwrap.dedent("""\
    <!--
    Auto-generated by make_print_table.py
    Qty & Material = *.meta.yml   ·   Check-box state is preserved.
    -->
    # ISS Mimic – 3-D Printing Checklist
    """).rstrip()

# ── CLI args ──────────────────────────────────────────────
ap = argparse.ArgumentParser()
ap.add_argument("--wiki-path", default="wiki")
ap.add_argument("--page",
                default="Build-Instruction:-3D-Printed-Parts.md")
args = ap.parse_args()
WIKI_MD = os.path.join(args.wiki_path, args.page)

# ── auth ─────────────────────────────────────────────────
TOKEN = os.getenv("GH_PAT") or os.getenv("GITHUB_TOKEN")
gh = Github(TOKEN) if TOKEN else Github()

# ── helpers ──────────────────────────────────────────────
def is_excluded(p: str) -> bool:
    return p[len(PART_ROOT):].lstrip("/").split("/", 1)[0].lower() in EXCLUDE

def load_meta(repo_path: str) -> dict:
    p = pathlib.PurePosixPath(repo_path)
    for ext in (".meta.yml", ".meta.yaml"):
        try:
            blob = gh.get_repo(REPO).get_contents(str(p.with_suffix(ext)),
                                                  ref="main")
            return yaml.safe_load(blob.decoded_content) or {}
        except Exception:
            pass
    return {}

def load_checkboxes() -> dict:
    if not os.path.isfile(WIKI_MD):
        return {}
    md = open(WIKI_MD, encoding="utf-8").read()
    rows, capture = [], False
    for tok in MarkdownIt().parse(md):
        if tok.type == "table_open": capture = True; continue
        if tok.type == "table_close": break
        if capture and tok.type == "tr_open": rows.append([])
        if capture and tok.type == "inline": rows[-1].append(tok.content.strip())
    boxes = {}
    for cells in rows[1:]:
        if len(cells) < 4: continue
        m = re.match(r"\[( |x)\] `([^`]+)`", cells[0], re.I)
        if m: boxes[m.group(2)] = (m.group(1).lower() == "x")
    return boxes

# ── gather part list ─────────────────────────────────────
tree = gh.get_repo(REPO).get_git_tree("main", recursive=True).tree
parts = [n.path for n in tree
         if n.type == "blob"
         and n.path.startswith(PART_ROOT)
         and not is_excluded(n.path)
         and n.path.lower().endswith((".stl", ".3mf"))]

# ── build table rows ─────────────────────────────────────
boxes = load_checkboxes()
rows  = []

for repo_path in sorted(parts, key=str.lower):
    fname = repo_path.split("/")[-1]
    meta  = load_meta(repo_path)
    qty   = str(meta.get("qty", ""))
    mat   = meta.get("material", "")

    checked  = boxes.get(fname, False)
    checkbox = "[x]" if checked else "[ ]"

    link = f"[{repo_path.replace(PART_ROOT + '/', '')}]({RAW_URL}{repo_path})"
    rows.append([f"{checkbox} `{fname}`", qty, mat, link])

md_table = tabulate(rows,
                    headers=["Print", "Qty", "Material", "Path in repo"],
                    tablefmt="github")

# ── write page ───────────────────────────────────────────
os.makedirs(os.path.dirname(WIKI_MD), exist_ok=True)
with open(WIKI_MD, "w", encoding="utf-8") as f:
    f.write(FRONT_MATTER + "\n\n" + md_table + "\n")
